workspace "Come en Casa" "Plataforma de gestión de pedidos de Come en Casa" {

    !identifiers hierarchical
    
    description "Una API para gestionar almuerzos, clientes y pedidos del restaurante 'Come en Casa'"
    
    model {
        pCliente = person "Cliente"
        pAdministrador = person "Administrador del restaurante"
        
        ssPedidos = softwareSystem "Plataforma de gestión de pedidos de Come en Casa" {
            
            appWeb = container "Frontend (futuro)" {
                tags "AppWeb"
                technology "React.js"
                description "Interfaz de usuario para clientes y administradores (en desarrollo futuro)"
            }
            
            apiPedidos = container "API de Pedidos" {
                tags "API"
                technology "Python FastAPI"
                description "API REST para la gestión de almuerzos, clientes y pedidos"

                gestionAlmuerzos = component "Gestión de Almuerzos" "Maneja operaciones CRUD para los almuerzos." "FastAPI / Python"
                gestionClientes = component "Gestión de Clientes" "Maneja operaciones CRUD para los clientes." "FastAPI / Python"
                gestionPedidos = component "Gestión de Pedidos" "Maneja operaciones CRUD para los pedidos." "FastAPI / Python"
                autenticacion = component "Autenticación" "Gestiona el acceso seguro con tokens." "FastAPI / Python"
            }
            
            dbPedidos = container "Base de Datos" {
                tags "Database"
                technology "PostgreSQL"
                description "Almacena almuerzos, clientes y pedidos del restaurante"
            }
        }

        // Relaciones
        pCliente -> ssPedidos.appWeb "Consulta menú y realiza pedidos"
        pAdministrador -> ssPedidos.appWeb "Gestiona almuerzos, clientes y pedidos"
        ssPedidos.apiPedidos -> ssPedidos.dbPedidos "Lee y escribe información a"
        ssPedidos.appWeb -> ssPedidos.apiPedidos "Envía solicitudes para interactuar con la API" "https"
    }

    views {
        systemContext ssPedidos {
            include *
            autolayout lr
        }

        container ssPedidos {
            include *
            autolayout lr
        }
        
        component ssPedidos.apiPedidos {
            include *
            autolayout lr
        }

        styles {
            element "Element" {
                color #ffffff
            }
            element "Person" {
                background #20dbd8
                shape person
            }
            element "Software System" {
                background #20dbd8
            }
            element "Container" {
                background #20dbd8
            }
            element "Database" {
                shape cylinder
            }
        }
    }

    configuration {
        scope softwaresystem
    }
}
